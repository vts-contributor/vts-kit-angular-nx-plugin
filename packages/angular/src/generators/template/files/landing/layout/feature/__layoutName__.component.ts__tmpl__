import { Component, OnDestroy, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import { VtsTypographyModule } from '@ui-vts/ng-vts/typography';
import { VtsGridModule } from '@ui-vts/ng-vts/grid';
import { VtsSpaceModule } from '@ui-vts/ng-vts/space';
import { VtsIconModule, VtsIconService } from '@ui-vts/ng-vts/icon';
import { VtsButtonModule } from '@ui-vts/ng-vts/button';
import { VtsDrawerModule } from '@ui-vts/ng-vts/drawer';
import { map, merge, Subject, takeUntil } from 'rxjs';
import {
  gridResponsiveMap,
  VtsBreakpointService,
} from '@ui-vts/ng-vts/core/services';
import { LogoComponent } from '@<%= npmScope %>/layout/ui';

@Component({
  selector: 'layout-feature-<%= layoutName %>',
  standalone: true,
  imports: [
    CommonModule,
    RouterModule,
    TranslateModule,
    VtsTypographyModule,
    VtsGridModule,
    VtsSpaceModule,
    VtsIconModule,
    VtsButtonModule,
    VtsDrawerModule,
    LogoComponent,
  ],
  templateUrl: './<%= layoutName %>.component.html',
  styleUrls: ['./<%= layoutName %>.component.<%= style %>'],
})
export class <%= classify(layoutName) %>Component implements OnInit, OnDestroy {
  // #region Data
  t = (v: string) => this.translateService.instant(v);
  emitter = merge(
    this.translateService.onLangChange,
    this.translateService.get(' ')
  );

  navActions$ = this.emitter.pipe(
    map(() => [
      {
        name: this.t('landing.layout.servicePrice'),
        primary: false,
      },
      {
        name: this.t('common.other.feature'),
        primary: false,
      },
      {
        name: this.t('common.other.contact'),
        primary: false,
      },
      {
        name: this.t('landing.layout.contractConfirmation'),
        primary: true,
      },
      {
        name: this.t('common.action.signin'),
        primary: true,
      },
    ])
  );

  companyContact$ = this.emitter.pipe(
    map(() => [
      {
        name: this.t('landing.layout.businessRegistrationNumber'),
        icon: 'TrademarkOutline:antd',
        value: this.t('landing.layout.businessRegistrationNumberValue'),
      },
      {
        name: this.t('common.other.address'),
        icon: 'LocationOnOutline:mat',
        value: '1 Giang Văn Minh, Kim Mã, Ba Đình, Hà Nội',
      },
      {
        name: this.t('common.other.hotline'),
        icon: 'LocalPhoneOutline:mat',
        value: '1800 8098/198',
      },
      {
        name: this.t('common.other.email'),
        icon: 'MailOutline:mat',
        value: 'hopdongdientu@gmail.com',
      },
    ])
  );

  footNavigation$ = this.emitter.pipe(
    map(() => [
      {
        title: this.t('common.other.product'),
        children: [
          this.t('common.other.feature'),
          this.t('landing.layout.pricePolicy'),
          this.t('common.other.support'),
        ],
      },
      {
        title: this.t('common.other.aboutUs'),
        children: [
          this.t('landing.layout.paymentPolicy'),
          this.t('landing.layout.productIntro'),
          this.t('landing.layout.operatingRegulation'),
          this.t('landing.layout.termOfUse'),
        ],
      },
    ])
  );

  trackByFn = () => false;
  // #endregion

  breakpoint$ = this.vtsBreakpoint.subscribe(gridResponsiveMap, true);
  drawerVisible = false;
  currentLang: string = '';
  destroy$ = new Subject();

  constructor(
    private iconService: VtsIconService,
    private translateService: TranslateService,
    private vtsBreakpoint: VtsBreakpointService
  ) {
    this.currentLang =
      this.translateService.currentLang || this.translateService.defaultLang;
    this.translateService.onLangChange
      .pipe(takeUntil(this.destroy$))
      .subscribe((e) => {
        this.currentLang = e.lang;
      });
  }

  ngOnInit(): void {}

  ngOnDestroy(): void {
    this.destroy$.next(null);
    this.destroy$.complete();
  }

  toggleDrawer() {
    this.drawerVisible = true;
  }

  setTranslate(lang: string) {
    this.translateService.use(lang);
  }
}
