import { Injectable } from '@angular/core';
import { tapResponse } from '@ngrx/component-store';
import { ImmerComponentStore } from 'ngrx-immer/component-store';
import { from, switchMap, tap } from 'rxjs';

export interface <%= classify(name) %>State {
  loading: boolean;
  data: any, // Entity Type
  error: string;
}

const initialState: <%= classify(name) %>State = {
  loading: false,
  data: null,
  error: '',
};

@Injectable()
export class <%= classify(name) %>Store extends ImmerComponentStore <<%= classify(name) %>State > {
  constructor() {
    super(initialState);
  }

  // Example of effect
  readonly query = this.effect<{}>((param$) =>
    param$.pipe(
      tap(() =>
        this.patchState({
          loading: true,
          error: '',
        })
      ),
      switchMap((param) => {
        // Api call
        return from(fetch('https://google.com', {
          body: JSON.stringify(param)
        })).pipe(
          tapResponse(
            (data) => {
              this.patchState({
                loading: false,
                data
              });
            },
            (e: { message: string }) =>
              this.patchState({
                loading: false,
                error: e.message,
              })
          )
        );
      })
    )
  );

  // Example of updater
  readonly set = this.updater<{
    loading: boolean
  }>((state, { loading }) => {
    state.loading = loading;
  });
}
